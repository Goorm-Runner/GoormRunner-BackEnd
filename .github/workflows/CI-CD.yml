name: 백엔드 CI/CD 파이프라인 🚀

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 브랜치 체크아웃 🧐
        uses: actions/checkout@v4

      - name: JDK 17 설정 ☕
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'zulu'

      - name: gradlew 실행 권한 부여 🔧
        run: chmod +x ./gradlew

      - name: Gradle로 빌드 🚧
        run: ./gradlew clean build -x test
        id: gradle_build
        env:
          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_S3_BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          ADMIN_NAME: ${{ secrets.ADMIN_NAME }}
          ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}

      - name: 테스트 실행 🧪
        run: ./gradlew test
        id: gradle_test
        env:
          SPRING_PROFILES_ACTIVE: prod

      - name: 테스트 실패한 곳 체크 🫠
        uses: mikepenz/action-junit-report@v3
        if: always()
        with:
            report_paths: '**/build/test-results/test/TEST-*.xml'

      - name: JUnit XML 리포트 업로드 📄
        if: always()
        uses: actions/upload-artifact@v4
        with:
            name: junit-test-report
            path: build/test-results/test

      - name: 빌드 아티팩트 목록 🗃️
        run: ls build/libs

      - name: 빌드 아티팩트 ZIP 압축 📦
        run: |
          JAR_NAME=$(ls build/libs | grep -v 'plain' | grep '.jar$')
          echo "발견된 JAR 파일: $JAR_NAME"
          zip -r backend.zip build/libs/$JAR_NAME appspec.yml scripts/
          ls -lh backend.zip

      - name: AWS 자격 증명 구성 🔑
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'ap-northeast-2'

      - name: S3에 업로드 🚀
        run: aws s3 cp backend.zip s3://${{ secrets.BACKEND_S3_BUCKET }}/${{ secrets.BACKEND_S3_KEY }}

      - name: S3 업로드 확인 🧐
        run: |
          aws s3 ls s3://${{ secrets.BACKEND_S3_BUCKET }}/
          if [ $? -ne 0 ]; then
            echo "S3 업로드 실패 또는 S3에 파일이 없음"
            exit 1
          else
            echo "S3 업로드 성공"
          fi

      - name: AWS CodeDeploy로 배포 🚀
        run: |
          aws deploy create-deployment \
            --application-name ${{ secrets.BACKEND_CODEDEPLOY_APPLICATION_NAME }} \
            --deployment-config-name CodeDeployDefault.OneAtATime \
            --deployment-group-name ${{ secrets.BACKEND_CODEDEPLOY_DEPLOYMENT_GROUP_NAME }} \
            --s3-location bucket=${{ secrets.BACKEND_S3_BUCKET }},bundleType=zip,key=${{ secrets.BACKEND_S3_KEY }}
